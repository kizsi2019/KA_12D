﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace ML
{
    public partial class MLModel1
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"battery_type", @"battery_type"),new InputOutputColumnPair(@"video_720p", @"video_720p"),new InputOutputColumnPair(@"video_1080p", @"video_1080p"),new InputOutputColumnPair(@"video_8K", @"video_8K"),new InputOutputColumnPair(@"video_30fps", @"video_30fps"),new InputOutputColumnPair(@"video_60fps", @"video_60fps"),new InputOutputColumnPair(@"video_120fps", @"video_120fps"),new InputOutputColumnPair(@"video_240fps", @"video_240fps"),new InputOutputColumnPair(@"video_480fps", @"video_480fps"),new InputOutputColumnPair(@"video_960fps", @"video_960fps")}, outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"inches", @"inches"),new InputOutputColumnPair(@"battery", @"battery"),new InputOutputColumnPair(@"ram(GB)", @"ram(GB)"),new InputOutputColumnPair(@"weight(g)", @"weight(g)"),new InputOutputColumnPair(@"storage(GB)", @"storage(GB)"),new InputOutputColumnPair(@"price(USD)", @"price(USD)")}))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"phone_name",outputColumnName:@"phone_name"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"brand",outputColumnName:@"brand"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"os",outputColumnName:@"os"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"resolution",outputColumnName:@"resolution"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"announcement_date",outputColumnName:@"announcement_date"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"battery_type",@"video_720p",@"video_1080p",@"video_8K",@"video_30fps",@"video_60fps",@"video_120fps",@"video_240fps",@"video_480fps",@"video_960fps",@"inches",@"battery",@"ram(GB)",@"weight(g)",@"storage(GB)",@"price(USD)",@"phone_name",@"brand",@"os",@"resolution",@"announcement_date"}))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.BinaryClassification.Trainers.SdcaLogisticRegression(new SdcaLogisticRegressionBinaryTrainer.Options(){L1Regularization=1F,L2Regularization=0.1F,LabelColumnName=@"video_4K",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
}
